name: QMI Python CI full test runner

on:
  schedule:
    # Schedule for every Monday at 7am
    - cron: "0 7 * * 1"

env:
  # minimum pylint code quality score (max. 10)
  PYLINT_MIN_SCORE: "9.00"
  # minimum code coverage (goal: 90%; max. 100%)
  COVERAGE_MIN_PERC: "90"
  # maximum code complexity (goal: <= 30; unbounded)
  COMPLEXITY_MAX_SCORE: "30"
  # this should be a comma separated list
  SOURCE_DIRS: "qmi/"

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python-latest
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y bc
          python3 --version
          pip install --upgrade pip
          pip install -e '.[dev]'
          pip install anybadge
      - name: pylint
        run: |
          pip install pylint
          - pip install pylint
          pylint --score=yes --load-plugins=pylint.extensions.mccabe --max-complexity=$COMPLEXITY_MAX_SCORE $SOURCE_DIRS | tee pylint.log
          SCORE=$( tail -n 2 pylint.log | grep -o '[0-9]\{1,2\}\.[0-9]\{2\}' | head -n 1 )
          echo $SCORE
          echo $SCORE > pylint_score
          # bc evaluates to `1` if relation is true
          exit $( echo "$SCORE < $PYLINT_MIN_SCORE" | bc )
          SCORE=$( cat pylint_score )
          anybadge -l pylint -v $SCORE -f pylint.svg 2=red 4=orange 8=yellow 10=green
        continue-on-error: true
      - name: upload pylint test results
        uses: actions/upload-artifact@v3
        with:
          name: pylint-results
          path: pylint.log
        if: ${{ always() }}
      - name: upload pylint test badge
        uses: actions/upload-artifact@v3
        with:
          name: pylint-badge
          path: pylint.svg
        if: always()
      - name: mypy
        run: |
          pip install mypy
          mypy --namespace-packages $SOURCE_DIRS | tee mypy.log
          if [ -n "$( tail -n 1 mypy.log | grep -e '^Succes' )" ]; then RESULT="passed"; else RESULT="failed"; fi
          anybadge -l mypy -v $RESULT -f mypy.svg failed=red passed=green
        continue-on-error: true
      - name: upload mypy test results
        uses: actions/upload-artifact@v3
        with:
          name: mypy-results
          path: mypy.log
        if: always()
      - name: upload mypy test badge
        uses: actions/upload-artifact@v3
        with:
          name: mypy-badge
          path: mypy.svg
        if: always()
      - name: coverage
        run: |
          pip install coverage
          if coverage run --branch --source=$SOURCE_DIRS -m unittest discover --start-directory=tests --pattern="test_*.py"; then RESULT="pass"; else RESULT="fail"; fi
          coverage report --show-missing --fail-under=$COVERAGE_MIN_PERC > coverage.log
      - name: upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results
          path: coverage.log
        if: always()
      - name: unit-tests latest
        run: |
          pip install unittest-xml-reporting
          python -m xmlrunner --output-file testresults.xml discover --start-directory=tests --pattern="test_*.py"
      - name: upload unit-tests results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: testresults.xml
        if: always()
